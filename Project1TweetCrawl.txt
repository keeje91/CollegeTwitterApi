#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# For dealing with json responses we receive from the API after sending the request
import json
# For sending GET requests from the API
import requests
import yaml


# ## Accessing the Bearer Token from an external yaml file

# In[ ]:


with open('twitter_keys.yml','r') as f:
    doc=yaml.load(f)
bearer_token=doc["tokens"]["bearer_token"]


# ## Authentication Header

# In[ ]:


def authentication():
    return bearer_token


# In[ ]:


def auth_headers(bearer_token):
    header_details = {"Authorization": "Bearer {}".format(bearer_token)}
    return header_details


# ## URL and Parameter Set

# In[ ]:


def create_get_url(keyword, start_date, end_date, max_results):    
    search_url = "https://api.twitter.com/2/tweets/search/recent" 
    query_params = {'query': keyword,
                    'start_time': start_date,
                    'end_time': end_date,
                    'max_results': max_results,
                    'expansions': 'attachments.poll_ids,attachments.media_keys,author_id,entities.mentions.username,geo.place_id,in_reply_to_user_id,referenced_tweets.id,referenced_tweets.id.author_id',
                    'tweet.fields': 'attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,referenced_tweets,reply_settings,source,text,withheld',
                    'user.fields': 'created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld',
                    'place.fields': 'contained_within,country,country_code,full_name,geo,id,name,place_type',
                    'next_token': None }
    return (search_url, query_params)


# In[ ]:


#Inputs for the request: searchQuery = ['#news', '#sport', '#BREAKING','#corona',"NASCAR"]
bearer_token = authentication()
headers = auth_headers(bearer_token)
keyword = "#news"
start_time = "2022-04-23T00:00:00.000Z"
end_time = "2022-04-29T00:00:00.000Z"
max_results = 100


# ## Sending GET Request

# In[ ]:


def send_request(url, headers, params):
    response = requests.request("GET", url, headers = headers, params = params)
    print("Response Received: " + str(response.status_code))
    if response.status_code != 200:
        raise Exception(response.status_code, response.text)
    return response.json()


# In[ ]:


url = create_get_url(keyword, start_time,end_time, max_results)
json_response = send_request(url[0], headers, url[1])


# ## Printing the JSON output

# In[ ]:


print(json.dumps(json_response, indent=4, sort_keys=True))

